# Basics

## Authentication

Currently there are multiple ways to authenticate against MOSAIC:

### Authentication for HVV Switch App with a logged-in User
Authentication for Apps with access to valid User Credentials is handled via jwt Token Authentication.<br>
To obtain a valid token consult the documentation for the Endpoint **/auth/token** and **/auth/token/refresh**.<br>
After obtaining a valid Token you can execute authenticated Requests against MOSAIC by setting the Authentication Header.

Example Request with Token:
```
curl -sH "Authentication: Bearer <token>" https://api.<env>.hochbahn.cloud/some/customer/endpoint
```
The env can be "dev", "qa" or must be omitted for the production environment (api.hochbahn.cloud).

### Authentication for HVV Switch App without a logged-in User
Authentication for Apps without access to valid User Credentials is handled by setting an API Key Header on Requests.<br>
To make things easier this API Key can also be set on Requests with a valid jwt Token of a User.

Example:
```
curl -sH "mosaic-api-key:<apikey>" https://api.<env>.hochbahn.cloud/some/anonymous/endpoint
```
The env can be "dev", "qa" or must be omitted for the production environment (api.hochbahn.cloud).

Only some of Mosaics Endpoints are accessible using this Method.
Most notably **routing**, **vehicle positions** or **ticket offers**.

### Authentication for m2m Communication
Authentication for m2m Commmunication is handled via jwt Token Authentication.
To obtain a valid token one needs to use the oAuth2.0 **client_credentials** Flow:

Example:
```bash
curl -X POST 'https://id.<env>.hochbahn.cloud/realms/mosaic/protocol/openid-connect/token' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'grant_type=client_credentials' \
-d 'client_id=<client-id>' \
-d 'client_secret=<client-secret>'
```
The env can be "dev", "qa" or must be omitted for the production environment (id.hochbahn.cloud).
The client_id and client_secret are your credentials.

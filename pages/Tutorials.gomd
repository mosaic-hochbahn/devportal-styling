# Tutorials

Here you find some information about _'how to'_ use MOSAIC.

## Authentication
### MOSAIC Identity Provider

MOSAIC Identity Provider is the _new_ OAuth2 based authentication method.

#### OAuth2 Authentication via Confidential Client

##### Request a JSON Web Token (JWT)

A curl request to get a JWT might look like this:

```bash
curl -X POST 'https://id.{stage}.hochbahn.cloud/realms/{realm}/protocol/openid-connect/token' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'grant_type=client_credentials' \
-d 'client_id={client-id}' \
-d 'client_secret={client-secret}'
```

The **stage** can be _"dev"_, _"qa"_ or must be omitted for the production environment (id.hochbahn.cloud).

The **realm** is the realm you want to authenticate against. This is usually _"mosaic"_.

The **client_id** and **client_secret** are your credentials.


##### Response

The response is JSON and might look like this:

```json
{
    "access_token": "{access-token}",
    "expires_in": 600,
    "refresh_expires_in": 0,
    "token_type": "Bearer",
    "not-before-policy": 0,
    "scope": ""
}
```

The **access_token** is the JWT you will need for any further API requests.

The expiration date is specified in **expires_in** in seconds.<br>
This means, your token is valid only for a certain amount of time, before you have to get a new one using this procedure.

#### OAuth2 Authentication via Username and Password
If you want to authenticate with a specific user, i.e. to access user specific data, you can use the following procedure.

##### Request a JSON Web Token (JWT)

A curl request to get a JWT might look like this:

```bash
curl -X POST 'https://id.{stage}.hochbahn.cloud/realms/{realm}/protocol/openid-connect/token' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'grant_type=password' \
-d 'username={username}' \
-d 'password={password}' \
-d 'client_id={client-id}' \
-d 'client_secret={client-secret}'
```

The **stage** can be _"dev"_, _"qa"_ or must be omitted for the production environment (id.hochbahn.cloud).

The **realm** is the realm you want to authenticate against. This is usually _"hvv-switch"_ or "__hvv-plus__".

The **client_id** and **client_secret** are your credentials. The **username** and **password** are the credentials of the user you want to authenticate.


##### Response

The response is JSON and might look like this:

```json
{
  "access_token": "{access-token}",
  "expires_in": 300,
  "refresh_expires_in": 900,
  "refresh_token": "{access-token}",
  "token_type": "Bearer",
  "not-before-policy": 0,
  "session_state": "",
  "scope": ""
}
```

The **access_token** is the JWT you will need for any further API requests.

The expiration date is specified in **expires_in** in seconds.<br>
This means, your token is valid only for a certain amount of time, before you have to get a new one using this procedure.

To get a new one you can use the **refresh_token**, until it expires. To do so, you can use the following procedure. The
**refresh_token** is valid for a longer period of time. In most cases, a session is only created if logging in as a user.
Therefore only in that case a **refresh_token** is returned.

```bash
curl -X POST 'https://id.{stage}.hochbahn.cloud/realms/{realm}/protocol/openid-connect/token' \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'grant_type=refresh_token' \
-d 'refresh_token={refresh_token}' \
-d 'client_id={client-id}' \
-d 'client_secret={client-secret}'
```

This will return a new **access_token** and a new **refresh_token** and extends the session.

#### Calling the MOSAIC API with the JWT

Once you've obtained a valid JWT, you have to append it to any subsequent API request.<br>
To do so, you need to supply a HTTP header _"Authorization"_ with the content *"Bearer {access-token}"*,
where you need to insert your **access_token** JWT resource.<br>
An example GET request against a fictional `/some-example-api` REST API might look like this:

```bash
curl -H 'Authorization: Bearer {access-token}' https://api.{stage}.hochbahn.cloud/some-example-api
```

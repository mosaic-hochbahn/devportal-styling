<div>
    <nav class="o-page__nav c-nav">
      {{$haveApi := false}}
      {{$haveOther := false}}
      {{$docBasePath := printf "%s%s" $.Prefix $.S.DocsBasePath }}
      {{$pageBasePath := printf "%s%s" $.Prefix $.S.PageBasePath }}
      {{range $i, $element := .S.K8sStore.Slice }}
        {{if $element.Metadata.HasDoc}}
          {{$haveApi = true}}
        {{else}}
          {{$haveOther = true}}
        {{end}}
      {{end}}
        <div>
            <h3>General</h3>
            <ul>
            {{range $i, $page := $.Pages}}
                {{$class := ""}}
                {{if eq $.CurrentPage $page}}
                    {{$class = "c-nav__selected"}}
                {{end}}
                <li><a class="{{$class}}" href="{{$pageBasePath}}{{$page}}">{{$page}}</a></li>
            {{end}}
            </ul>
        </div>
        <br />
        <div>
            <h3>APIs</h3>
            <div id="apiListWrapper"></div>
        </div>

        <div id="uncategorizedApiListWrapper">
            <!-- for debugging: v0.3 -->
        </div>

        {{if $haveOther}}
        <br />
        <div>
            <h4 class="collapsible">Services without documentation</h4>
            <ul class="contentList">
            {{range $i, $element := .S.K8sStore.Slice }}
                {{$mtdt := $element.Metadata}}
                {{if not $mtdt.HasDoc}}
                    <li>
                        <samp>{{$mtdt.ServiceDisplayName}}</samp>
                    </li>
                {{end}}
            {{end}}
            </ul>
        </div>
        {{end}}
    </nav>
</div>

<script>

    const apiList = {{.S.K8sStore.Slice}};

    addCollapse = () => {
        let collapsibles = document.getElementsByClassName("collapsible");

        for (let i = 0; i < collapsibles.length; i++) {
            addEvent(collapsibles[i]);
        }
    }

    // Add click event to col
    addEvent = (clickElement) => {
        clickElement.addEventListener("click", function () {
            this.classList.toggle("active");
            let content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        createCategoryLists(getApiCategories());
        createUncategorizedList(getUncategorizedApis());

        addCollapse();
        openNavigation();
    }, false);

    // Collect all API-categories from all display_names matching "mosaic:<category>.xxx.xxx"
    getApiCategories = () => {
        return [...new Set(apiList.flatMap(item =>
            item.Metadata.ServiceDisplayName.match(/mosaic:[a-z0-9_-]+\.[a-z0-9_-]+\.[a-z0-9_-]+/g) ?
                [item.Metadata.ServiceDisplayName.substring(7, item.Metadata.ServiceDisplayName.indexOf('.'))] :
                []
        ))];
    }

    // Collect all APIs that don't have a displayname matching the "mosaic:<category>.xxx.xxx" syntax, but do have a documentation.
    getUncategorizedApis = () => {
        return apiList.filter(item =>
            (!item.Metadata.hasOwnProperty('ServiceDisplayName') || !item.Metadata.ServiceDisplayName.match(/mosaic:[a-z0-9_-]+\.[a-z0-9_-]+\.[a-z0-9_-]+/g))
            && item.Metadata.HasDoc);
    }

    // Mark current link as active and show it.
    openNavigation = () => {
        if ("{{.CurrentService}}".length === 0) {
            return;
        }

        let currentLink = document.querySelector("a[href='" + window.location.pathname + "']")
        currentLink.classList.add('active');

        let currentCategory = currentLink.closest('ul');
        currentCategory.style.display = "block";
        currentCategory.previousElementSibling.classList.add('active');

        currentLink.scrollIntoView();
    }

    createUncategorizedList = (uncategorizedApis) => {
        if (uncategorizedApis.length < 1) {
            return;
        }

        let topic = document.createElement("h4");
        topic.innerText = "Uncategorized";
        topic.classList.add("collapsible");

        let uList = document.createElement("ul");
        uList.classList.add("contentList");

        // Create for each API a li element with a link to the documentation
        uncategorizedApis.forEach(li => {
            let liItem = document.createElement("li");
            let a = document.createElement("a");
            a.href = {{$.Prefix}} +"doc/" + li.Service.namespace + "/" + li.Service.name;
            a.innerText = li.Service.name;
            liItem.appendChild(a);
            uList.appendChild(liItem);
        });

        let wrapper = document.getElementById("uncategorizedApiListWrapper");
        wrapper.appendChild(topic);
        wrapper.appendChild(uList);
    }

    // Create a new navigation-list for each API category
    createCategoryLists = (categories) => {
        categories.forEach(category => {
            // create topic element
            let topic = document.createElement("h4");
            topic.innerText = category.toString();
            topic.classList.add("collapsible");

            let uList = document.createElement("ul");
            uList.classList.add("contentList");

            // Collect all APIs belonging to same category and do have a documentation
            const liList = apiList.filter(i => i.Metadata.ServiceDisplayName.substring(7, i.Metadata.ServiceDisplayName.indexOf('.')).startsWith(category) && i.Metadata.HasDoc);

            // Create for each API a li element with a link to the documentation
            liList.forEach(li => {
                let liItem = document.createElement("li");
                let a = document.createElement("a");
                a.href = {{$.Prefix}} +"doc/" + li.Service.namespace + "/" + li.Service.name;
                let displayName = li.Metadata.ServiceDisplayName;
                a.innerText = displayName.substring(displayName.indexOf('.') + 1);
                liItem.appendChild(a);
                uList.appendChild(liItem);
            });

            let wrapper = document.getElementById("apiListWrapper");
            wrapper.appendChild(topic);
            wrapper.appendChild(uList);
        });
    }

</script>